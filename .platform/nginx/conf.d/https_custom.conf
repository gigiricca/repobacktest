server {
    listen 443 ssl;
    server_name cateringlink.store www.cateringlink.store;

    ssl_certificate /etc/letsencrypt/live/cateringlink.store/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cateringlink.store/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Redirigir todo el tr√°fico HTTP a HTTPS
    location / {
        # Configurar proxy inverso para Vercel (Frontend)
        proxy_pass https://76.76.21.21;  # IP de Vercel para tu frontend
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        # Configurar CORS
        add_header 'Access-Control-Allow-Origin' 'https://www.cateringlink.store';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
    }

    # Manejar las solicitudes a la API
    location /api/ {
        # Configurar proxy inverso para el backend en Elastic Beanstalk
        proxy_pass https://cateringlinkbackend-env.eba-xcz9cmwu.us-east-2.elasticbeanstalk.com;  # O la IP/URL del backend de Elastic Beanstalk
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        # Configurar CORS
        add_header 'Access-Control-Allow-Origin' 'https://www.cateringlink.store';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
    }
}
